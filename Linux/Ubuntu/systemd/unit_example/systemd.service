[Unit] # Метаданные и зависимости
Description=Service
After=network-online.target # После чего
Before=
Wanted=network-online.target # Одновременно с чем

[Service]
ExecStart=<command>
User=<user>
Group=<group>
Type=simple (сервис завершается, когда завершится процесс) # Тип запускаемого процесса
     exec # перезапустить, если завершится  
     timer
     oneshot # сервис запускается только один раз и затем завершается, systemd не следит за состоянием после завершения
     forking # фоновый запуск, systemd следит за главным процессом, а не за которым запустил сервис

[Install] # Правила установки и запуска
WantedBy=multi-user.target # После запуска, будет запущен наш сервис

[Unit] секция:
Description=Краткое описание сервиса.
Documentation=Ссылка на документацию сервиса.
After/Before: Зависимости от других сервисов (например, After=network.target). Используйте Requires, если хотите, чтобы сервис гарантированно запускался после другого сервиса.
Requires=Указывает, что этот сервис требует запуска указанных сервисов.
Wants=Указывает, что этот сервис "хочет" запуска указанных сервисов, но не гарантирует этого.
Conflicts=Указывает, с какими сервисами данный сервис не должен работать одновременно.
PartOf=Указывает, что данный сервис является частью другого сервиса. Полезно для связывания сервисов в единую систему.
BindsTo=Как и Requires, но когда привязанный сервис останавливается, то и этот остановится.
StartLimitInterval и StartLimitBurst=Предотвращение зацикливания при частых перезапусках.
ConditionPathExists=Запуск только при наличии определенного файла или каталога. Полезно при динамической конфигурации.
ConditionPathIsDirectory, ConditionPathIsSymbolicLink, ConditionPathIsReadWrite=Проверка других типов файлов.
ConditionUser и ConditionGroup=Проверка принадлежности к пользователю и группе.
ConditionKernelCommandLine=Проверка параметров ядра.
ConditionVirtualization=Проверка, выполняется ли сервис в виртуализированной среде.
ConditionArchitecture=Проверка архитектуры процессора.

[Service] секция:
Type: Тип сервиса:
  simple: Запускает один процесс и считает его сервисом. Это наиболее распространенный тип.
  forking: Запускает процесс, который форкается в бэкграунд. systemd отслеживает дочерний процесс.
  oneshot: Выполняет действие и завершается. Обычно используется для разовых задач.
  dbus: Запускает сервис, который ожидает вызова через DBus.
  notify: Используйте этот тип, если ваш сервис отправляет уведомления systemd, для более корректной работы.
ExecStart=Команда для запуска сервиса.
ExecStartPre, ExecStartPost=Команды для выполнения перед и после запуска сервиса.
ExecStop=Команда для остановки сервиса.
ExecReload=Команда для перезагрузки сервиса.
ExecStopPost=Команды, которые будут выполнены после остановки сервиса.
Restart=Когда перезапускать сервис (например, on-failure, always).
RestartSec=Задержка перед перезапуском.
TimeoutStartSec, TimeoutStopSec=Тайм-ауты для запуска и остановки сервиса.
User, Group=Пользователь и группа, от имени которых запускается сервис.
WorkingDirectory=Рабочий каталог сервиса.
Environment=Переменные окружения.
EnvironmentFile=Путь к файлу переменных окружения.
PrivateTmp, PrivateNetwork, PrivateDevices=Параметры безопасности, ограничивающие доступ к файловой системе, сети и устройствам.
CapabilityBoundingSet=Задает набор привилегий, досту
ReadWritePaths, ReadOnlyPaths, InaccessiblePaths=Ограничение доступа к файловой системе.
StandardOutput, StandardError=Перенаправление вывода сервиса. Используйте journal, чтобы перенаправлять вывод в systemd-journal.
PIDFile=Путь к PID файлу, если требуется для сервиса.

[Install] секция:
WantedBy=Какая цель должна запускать этот сервис (например, multi-user.target для обычных сервисов).
RequiredBy=Какая цель требует этот сервис.
Also=Какие цели или юниты должны быть включены или выключены вместе с этим юнитом.
